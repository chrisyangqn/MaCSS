xlab = "Predicted Values",
ylab = "Residuals",
pch = 19,
col = "yellow",
cex = 0.5)
predicted_values <- predict(model)
residuals <- resid(model)
plot(predicted_values, residuals,
main = "Residuals vs Predicted Values",
xlab = "Predicted Values",
ylab = "Residuals",
pch = 19,
col = "lightpink1",
cex = 0.5)
predicted_values <- predict(model)
residuals <- resid(model)
plot(predicted_values, residuals,
main = "Residuals vs Predicted Values",
xlab = "Predicted Values",
ylab = "Residuals",
pch = 19,
col = "lightpink1",
cex = 0.01)
predicted_values <- predict(model)
residuals <- resid(model)
plot(predicted_values, residuals,
main = "Residuals vs Predicted Values",
xlab = "Predicted Values",
ylab = "Residuals",
pch = 19,
col = "lightpink1",
cex = 0.05)
predicted_values <- predict(model)
residuals <- resid(model)
plot(predicted_values, residuals,
main = "Residuals vs Predicted Values",
xlab = "Predicted Values",
ylab = "Residuals",
pch = 19,
col = "lightpink1",
cex = 0.1)
predicted_values <- predict(model)
residuals <- resid(model)
plot(predicted_values, residuals,
main = "Residuals vs Predicted Values",
xlab = "Predicted Values",
ylab = "Residuals",
pch = 19,
col = "lightpink1",
cex = 0.2)
predicted_values <- predict(model)
residuals <- resid(model)
plot(predicted_values, residuals,
main = "Residuals vs Predicted Values",
xlab = "Predicted Values",
ylab = "Residuals",
pch = 19,
col = "lightpink1",
cex = 0.2)
install.packages("skedastic")
library(skedastic)
install.packages("skedastic")
library(skedastic)
library(skedastic)
install.packages("lmtest")
library(lmtest)
model_skedastic <- lm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
bptest(model)
install.packages("skedastic")
library(skedastic)
install.packages("mgcv")
brew install gcc
install.packages('skedastic')
library(skedastic)
library(skedastic)
white_test_result <- white_lm(model)
library(skedastic)
white_test_result <- white_lm(model)
library(skedastic)
white_test_result <- white_test(model)
library(skedastic)
white_test_result <- white_test(model)
install.packages("sandwich")
library(lmtest)
library(sandwich)
bptest(model, ~ fitted(model) + I(fitted(model)^2))
install.packages("lfe")
library(lfe)
library(lfe)
install.packages("lfe")
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
summary(model_felm)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model, vcov = robust_se)
robust_se <- vcovHC(model, type = "HC1")
coeftest(model, vcov = robust_se)
library(lfe)
robust_se <- vcovHC(model, type = "HC1")
coeftest(model, vcov = robust_se)
robust_se <- vcovHC(model, type = "HC1")
coeftest(model, vcov = robust_se)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
model <- lm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
summary(model)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
waldtest(model_felm, vcov = robust_se)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
waldtest(model_felm, vcov = robust_se)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
waldtest_result <- waldtest(model_felm, vcov = function(x) robust_se)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
n_coef <- length(coef(model_felm))  # Number of coefficients
n_obs <- nrow(model_felm$X)  # Number of observations
df_resid <- model_felm$df.residual  # Residual degrees of freedom
# Compute the F-statistic manually using the robust covariance matrix
wald_stat <- t(coef(model_felm)) %*% solve(robust_se) %*% coef(model_felm)
f_statistic <- (wald_stat / n_coef) / (sum(residuals(model_felm)^2) / df_resid)
# Display the F-statistic
f_statistic
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
n_coef <- length(coef(model_felm))  # Number of coefficients
n_obs <- nrow(model_felm$X)  # Number of observations
df_resid <- model_felm$df.residual  # Residual degrees of freedom
wald_stat <- t(coef(model_felm)) %*% solve(robust_se) %*% coef(model_felm)
f_statistic <- (wald_stat / n_coef) / (sum(residuals(model_felm)^2) / df_resid)
f_statistic
# Step 1: Fit the original regression model
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
# Step 2: Generate squared residuals (e2)
e2 <- residuals(model_felm)^2
# Step 3: Generate squared versions of the independent variables
selected_variables$song_duration_ms_sq <- selected_variables$song_duration_ms^2
selected_variables$acousticness_sq <- selected_variables$acousticness^2
selected_variables$danceability_sq <- selected_variables$danceability^2
selected_variables$energy_sq <- selected_variables$energy^2
selected_variables$tempo_sq <- selected_variables$tempo^2
# Step 4: Generate interaction terms between independent variables
selected_variables$acousticness_danceability <- selected_variables$acousticness * selected_variables$danceability
selected_variables$energy_danceability <- selected_variables$energy * selected_variables$danceability
selected_variables$song_duration_ms_acousticness <- selected_variables$song_duration_ms * selected_variables$acousticness
selected_variables$song_duration_ms_danceability <- selected_variables$song_duration_ms * selected_variables$danceability
selected_variables$song_duration_ms_energy <- selected_variables$song_duration_ms * selected_variables$energy
selected_variables$song_duration_ms_tempo <- selected_variables$song_duration_ms * selected_variables$tempo
selected_variables$acousticness_energy <- selected_variables$acousticness * selected_variables$energy
selected_variables$acousticness_tempo <- selected_variables$acousticness * selected_variables$tempo
selected_variables$danceability_tempo <- selected_variables$danceability * selected_variables$tempo
selected_variables$energy_tempo <- selected_variables$energy * selected_variables$tempo
# Step 5: Run the White Test regression
white_test_model <- lm(e2 ~ song_duration_ms + acousticness + danceability + energy + tempo +
song_duration_ms_sq + acousticness_sq + danceability_sq + energy_sq + tempo_sq +
acousticness_danceability + energy_danceability + song_duration_ms_acousticness +
song_duration_ms_danceability + song_duration_ms_energy + song_duration_ms_tempo +
acousticness_energy + acousticness_tempo + danceability_tempo + energy_tempo,
data = selected_variables)
# Step 6: Summarize the results of the White Test regression
summary(white_test_model)
# Step 7: Replicate the test statistic
n <- nrow(selected_variables)
r_squared <- summary(white_test_model)$r.squared
white_statistic <- n * r_squared
# Display the White test statistic
white_statistic
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
e2 <- residuals(model_felm)^2
vars <- c("song_duration_ms", "acousticness", "danceability", "energy", "tempo")
for (var in vars) {
selected_variables[[paste0(var, "_sq")]] <- selected_variables[[var]]^2
}
for (i in 1:(length(vars)-1)) {
for (j in (i+1):length(vars)) {
var1 <- vars[i]
var2 <- vars[j]
selected_variables[[paste0(var1, "_", var2)]] <- selected_variables[[var1]] * selected_variables[[var2]]
}
}
white_test_model <- lm(e2 ~ song_duration_ms + acousticness + danceability + energy + tempo +
song_duration_ms_sq + acousticness_sq + danceability_sq + energy_sq + tempo_sq +
acousticness_danceability + energy_danceability + song_duration_ms_acousticness +
song_duration_ms_danceability + song_duration_ms_energy + song_duration_ms_tempo +
acousticness_energy + acousticness_tempo + danceability_tempo + energy_tempo,
data = selected_variables)
summary(white_test_model)
n <- nrow(selected_variables)
r_squared <- summary(white_test_model)$r.squared
white_statistic <- n * r_squared
white_statistic
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear memory
setwd("/Users/chris/Library/Mobile Documents/com~apple~CloudDocs/Berkeley/COMPSS 212 Applied Statistics I/public-repository-1/problem_set_2")
# options(htmltools.dir.version = FALSE)
# p_load(FSM,car,lfe, skedastic, parallel,GGally,broom,kableExtra, estimatr,plm,leaflet, gganimate, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr,pagedown,tibble,latex2exp,MASS,stargazer)
library(pacman)
library(psych)
library(dplyr)
library(GGally)
library(ggcorrplot)
data <- read.csv(file = 'song_data.csv')
data_numeric <- subset(data, select = -song_name)
summary_statistics <- data.frame(
mean = sapply(data_numeric, mean, na.rm = TRUE),
std = sapply(data_numeric, sd, na.rm = TRUE),
min = sapply(data_numeric, min, na.rm = TRUE),
max = sapply(data_numeric, max, na.rm = TRUE)
)
# View the summary statistics
print(summary_statistics)
selected_variables <- data %>%
select(song_popularity, song_duration_ms, acousticness, danceability, energy, tempo)
cor_matrix <- cor(selected_variables, use = "complete.obs")
ggcorrplot(cor_matrix, method = "square", type = "lower", lab = TRUE,
colors = c("blue", "white", "red"), lab_size = 3, title = "Correlation Matrix")
model <- lm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
summary(model)
predicted_values <- predict(model)
residuals <- resid(model)
plot(predicted_values, residuals,
main = "Residuals vs Predicted Values",
xlab = "Predicted Values",
ylab = "Residuals",
pch = 19,
col = "lightpink1",
cex = 0.2)
library(skedastic)
white_test_result <- white_test(model)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
n_coef <- length(coef(model_felm))
n_obs <- nrow(model_felm$X)
df_resid <- model_felm$df.residual
wald_stat <- t(coef(model_felm)) %*% solve(robust_se) %*% coef(model_felm)
f_statistic <- (wald_stat / n_coef) / (sum(residuals(model_felm)^2) / df_resid)
f_statistic
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
e2 <- residuals(model_felm)^2
vars <- c("song_duration_ms", "acousticness", "danceability", "energy", "tempo")
for (var in vars) {
selected_variables[[paste0(var, "_sq")]] <- selected_variables[[var]]^2
}
for (i in 1:(length(vars)-1)) {
for (j in (i+1):length(vars)) {
var1 <- vars[i]
var2 <- vars[j]
selected_variables[[paste0(var1, "_", var2)]] <- selected_variables[[var1]] * selected_variables[[var2]]
}
}
white_test_model <- lm(e2 ~ song_duration_ms + acousticness + danceability + energy + tempo +
song_duration_ms_sq + acousticness_sq + danceability_sq + energy_sq + tempo_sq +
acousticness_danceability + energy_danceability + song_duration_ms_acousticness +
song_duration_ms_danceability + song_duration_ms_energy + song_duration_ms_tempo +
acousticness_energy + acousticness_tempo + danceability_tempo + energy_tempo,
data = selected_variables)
# Step 1: Fit the original regression model
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
# Step 2: Generate squared residuals (e2)
e2 <- residuals(model_felm)^2
# Step 3: Generate squared terms and interaction terms
vars <- c("song_duration_ms", "acousticness", "danceability", "energy", "tempo")
# Generate squared terms
for (var in vars) {
selected_variables[[paste0(var, "_sq")]] <- selected_variables[[var]]^2
}
# Generate interaction terms
for (i in 1:(length(vars)-1)) {
for (j in (i+1):length(vars)) {
var1 <- vars[i]
var2 <- vars[j]
selected_variables[[paste0(var1, "_", var2)]] <- selected_variables[[var1]] * selected_variables[[var2]]
}
}
# Step 4: Dynamically create the formula for the regression
squared_vars <- paste0(vars, "_sq")
interaction_vars <- combn(vars, 2, FUN = function(x) paste0(x[1], "_", x[2]))
all_vars <- c(vars, squared_vars, interaction_vars)
# Step 5: Run the White Test regression
white_test_model <- lm(as.formula(paste("e2 ~", paste(all_vars, collapse = " + "))), data = selected_variables)
# Step 6: Summarize the results of the White Test regression
summary(white_test_model)
# Step 7: Calculate the White test statistic
n <- nrow(selected_variables)
r_squared <- summary(white_test_model)$r.squared
white_statistic <- n * r_squared
# Display the White test statistic
white_statistic
# Step 1: Fit the original regression model
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
# Step 2: Generate squared residuals (e2)
e2 <- residuals(model_felm)^2
# Step 3: Generate squared terms and interaction terms
vars <- c("song_duration_ms", "acousticness", "danceability", "energy", "tempo")
# Generate squared terms
for (var in vars) {
selected_variables[[paste0(var, "_sq")]] <- selected_variables[[var]]^2
}
# Generate interaction terms
for (i in 1:(length(vars)-1)) {
for (j in (i+1):length(vars)) {
var1 <- vars[i]
var2 <- vars[j]
selected_variables[[paste0(var1, "_", var2)]] <- selected_variables[[var1]] * selected_variables[[var2]]
}
}
# Step 4: Dynamically create the formula for the regression
squared_vars <- paste0(vars, "_sq")
interaction_vars <- combn(vars, 2, FUN = function(x) paste0(x[1], "_", x[2]))
all_vars <- c(vars, squared_vars, interaction_vars)
# Step 5: Run the White Test regression
white_test_model <- lm(as.formula(paste("e2 ~", paste(all_vars, collapse = " + "))), data = selected_variables)
# Step 6: Summarize the results of the White Test regression
summary(white_test_model)
# Step 7: Calculate the White test statistic
n <- nrow(selected_variables)
r_squared <- summary(white_test_model)$r.squared
white_statistic <- n * r_squared
# Display the White test statistic
white_statistic
library(skedastic)
# white_test_result <- white_test(model)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
# robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear memory
setwd("/Users/chris/Library/Mobile Documents/com~apple~CloudDocs/Berkeley/COMPSS 212 Applied Statistics I/public-repository-1/problem_set_2")
# options(htmltools.dir.version = FALSE)
# p_load(FSM,car,lfe, skedastic, parallel,GGally,broom,kableExtra, estimatr,plm,leaflet, gganimate, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr,pagedown,tibble,latex2exp,MASS,stargazer)
library(pacman)
library(psych)
library(dplyr)
library(GGally)
library(ggcorrplot)
library(pacman)
library(psych)
library(dplyr)
library(GGally)
library(ggcorrplot)
data <- read.csv(file = 'song_data.csv')
data_numeric <- subset(data, select = -song_name)
summary_statistics <- data.frame(
mean = sapply(data_numeric, mean, na.rm = TRUE),
std = sapply(data_numeric, sd, na.rm = TRUE),
min = sapply(data_numeric, min, na.rm = TRUE),
max = sapply(data_numeric, max, na.rm = TRUE)
)
# View the summary statistics
print(summary_statistics)
selected_variables <- data %>%
select(song_popularity, song_duration_ms, acousticness, danceability, energy, tempo)
cor_matrix <- cor(selected_variables, use = "complete.obs")
ggcorrplot(cor_matrix, method = "square", type = "lower", lab = TRUE,
colors = c("blue", "white", "red"), lab_size = 3, title = "Correlation Matrix")
model <- lm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
summary(model)
model <- lm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
summary(model)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear memory
setwd("/Users/chris/Library/Mobile Documents/com~apple~CloudDocs/Berkeley/COMPSS 212 Applied Statistics I/public-repository-1/problem_set_2")
# options(htmltools.dir.version = FALSE)
# p_load(FSM,car,lfe, skedastic, parallel,GGally,broom,kableExtra, estimatr,plm,leaflet, gganimate, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr,pagedown,tibble,latex2exp,MASS,stargazer)
library(pacman)
library(psych)
library(dplyr)
library(GGally)
library(ggcorrplot)
library(pacman)
library(psych)
library(dplyr)
library(GGally)
library(ggcorrplot)
data <- read.csv(file = 'song_data.csv')
data_numeric <- subset(data, select = -song_name)
summary_statistics <- data.frame(
mean = sapply(data_numeric, mean, na.rm = TRUE),
std = sapply(data_numeric, sd, na.rm = TRUE),
min = sapply(data_numeric, min, na.rm = TRUE),
max = sapply(data_numeric, max, na.rm = TRUE)
)
# View the summary statistics
print(summary_statistics)
selected_variables <- data %>%
select(song_popularity, song_duration_ms, acousticness, danceability, energy, tempo)
cor_matrix <- cor(selected_variables, use = "complete.obs")
ggcorrplot(cor_matrix, method = "square", type = "lower", lab = TRUE,
colors = c("blue", "white", "red"), lab_size = 3, title = "Correlation Matrix")
model <- lm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
summary(model)
predicted_values <- predict(model)
residuals <- resid(model)
plot(predicted_values, residuals,
main = "Residuals vs Predicted Values",
xlab = "Predicted Values",
ylab = "Residuals",
pch = 19,
col = "lightpink1",
cex = 0.2)
library(skedastic)
# white_test_result <- white_test(model)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
library(pacman)
library(psych)
library(dplyr)
library(GGally)
library(ggcorrplot)
library(sandwich)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
library(lfe)
library(sandwich)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
library(pacman)
library(psych)
library(dplyr)
library(GGally)
library(ggcorrplot)
library(sandwich)
library(lmtest)
library(pacman)
library(psych)
library(dplyr)
library(GGally)
library(ggcorrplot)
library(sandwich)
library(lmtest)
library(lfe)
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
robust_se <- vcovHC(model_felm, type = "HC1")
coeftest(model_felm, vcov = robust_se)
n_coef <- length(coef(model_felm))
n_obs <- nrow(model_felm$X)
df_resid <- model_felm$df.residual
wald_stat <- t(coef(model_felm)) %*% solve(robust_se) %*% coef(model_felm)
f_statistic <- (wald_stat / n_coef) / (sum(residuals(model_felm)^2) / df_resid)
f_statistic
# Step 1: Fit the original regression model
model_felm <- felm(song_popularity ~ song_duration_ms + acousticness + danceability + energy + tempo, data = selected_variables)
# Step 2: Generate squared residuals (e2)
e2 <- residuals(model_felm)^2
# Step 3: Generate squared terms and interaction terms
vars <- c("song_duration_ms", "acousticness", "danceability", "energy", "tempo")
# Generate squared terms
for (var in vars) {
selected_variables[[paste0(var, "_sq")]] <- selected_variables[[var]]^2
}
# Generate interaction terms
for (i in 1:(length(vars)-1)) {
for (j in (i+1):length(vars)) {
var1 <- vars[i]
var2 <- vars[j]
selected_variables[[paste0(var1, "_", var2)]] <- selected_variables[[var1]] * selected_variables[[var2]]
}
}
# Step 4: Dynamically create the formula for the regression
squared_vars <- paste0(vars, "_sq")
interaction_vars <- combn(vars, 2, FUN = function(x) paste0(x[1], "_", x[2]))
all_vars <- c(vars, squared_vars, interaction_vars)
# Step 5: Run the White Test regression
white_test_model <- lm(as.formula(paste("e2 ~", paste(all_vars, collapse = " + "))), data = selected_variables)
# Step 6: Summarize the results of the White Test regression
summary(white_test_model)
# Step 7: Calculate the White test statistic
n <- nrow(selected_variables)
r_squared <- summary(white_test_model)$r.squared
white_statistic <- n * r_squared
# Display the White test statistic
white_statistic
