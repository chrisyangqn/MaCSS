knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear memory
setwd("/Users/chris/Library/Mobile Documents/com~apple~CloudDocs/Berkeley/COMPSS 212 Applied Statistics I/public-repository-1/problem_set_3")
# options(htmltools.dir.version = FALSE)
# p_load(FSM,car,lfe, skedastic, parallel,GGally,broom,kableExtra, estimatr,plm,leaflet, gganimate, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr,pagedown,tibble,latex2exp,MASS,stargazer)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear memory
setwd("/Users/chris/Library/Mobile Documents/com~apple~CloudDocs/Berkeley/COMPSS 212 Applied Statistics I/public-repository-1/problem_set_3")
# options(htmltools.dir.version = FALSE)
# p_load(FSM,car,lfe, skedastic, parallel,GGally,broom,kableExtra, estimatr,plm,leaflet, gganimate, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr,pagedown,tibble,latex2exp,MASS,stargazer)
library(pacman)
library(psych)
library(dplyr)
library(GGally)
library(ggcorrplot)
library(sandwich)
library(lmtest)
library(pacman)
library(psych)
library(dplyr)
library(GGally)
library(ggcorrplot)
library(sandwich)
library(lmtest)
library(tidyverse)
library(broom)
library(tidyverse)
library(broom)
library(tidyverse)
library(broom)
# Load necessary libraries
library(tidyverse)
library(broom)
# Simulate data to illustrate the bias in $\beta_7$
set.seed(123)
n <- 1000
# Generate correlated variables: education, ability, experience, tenure, etc.
ability <- rnorm(n, mean = 0, sd = 1)
education <- 0.5 * ability + rnorm(n)  # assume positive correlation with ability
experience <- rnorm(n, mean = 10, sd = 5)
tenure <- rnorm(n, mean = 5, sd = 2)
married <- rbinom(n, 1, 0.5)
south <- rbinom(n, 1, 0.3)
urban <- rbinom(n, 1, 0.7)
black <- rbinom(n, 1, 0.2)
# Define true model with ability
beta_0 <- 1
beta_1 <- 0.05
beta_2 <- 0.03
beta_3 <- 0.1
beta_4 <- -0.05
beta_5 <- 0.02
beta_6 <- -0.1
beta_7 <- 0.2  # effect of education
gamma <- 0.3   # effect of ability
# Generate log(wage) with ability included
log_wage <- beta_0 +
beta_1 * experience +
beta_2 * tenure +
beta_3 * married +
beta_4 * south +
beta_5 * urban +
beta_6 * black +
beta_7 * education +
gamma * ability +
rnorm(n, sd = 0.2)
# Create data frame
data <- data.frame(log_wage, experience, tenure, married, south, urban, black, education, ability)
# Run OLS without ability (introducing bias)
model_without_ability <- lm(log_wage ~ experience + tenure + married + south + urban + black + education, data = data)
summary(model_without_ability)
# Run OLS with ability included (unbiased)
model_with_ability <- lm(log_wage ~ experience + tenure + married + south + urban + black + education + ability, data = data)
summary(model_with_ability)
# Compare the estimates of beta_7 in both models
tidy(model_without_ability) %>%
filter(term == "education") %>%
mutate(Model = "Without Ability") %>%
bind_rows(
tidy(model_with_ability) %>%
filter(term == "education") %>%
mutate(Model = "With Ability")
) %>%
select(Model, term, estimate, std.error)
# OLS model excluding ability
model_without_ability <- lm(log(wage) ~ exper + tenure + married + south + urban + black + educ, data = data)
# Load necessary libraries
library(tidyverse)
# Load the data
data <- read.csv("newburn.csv")
# Step 1: Check correlation between ability (IQ) and education
cor(data$iq, data$educ, use = "complete.obs")
# Step 2: Estimate the model without IQ (omitting ability)
model_without_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ, data = data)
summary(model_without_ability)
# Step 3: Estimate the model including IQ as a proxy for ability
model_with_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ + iq, data = data)
summary(model_with_ability)
# Step 4: Compare estimates of beta_7 (educ coefficient) in both models
beta7_comparison <- data.frame(
Model = c("Without Ability", "With Ability"),
Estimate = c(coef(model_without_ability)["educ"], coef(model_with_ability)["educ"]),
Std_Error = c(summary(model_without_ability)$coefficients["educ", "Std. Error"],
summary(model_with_ability)$coefficients["educ", "Std. Error"])
)
print(beta7_comparison)
# Step 5: Analyze the direction of bias
if (cor(data$iq, data$educ, use = "complete.obs") > 0) {
print("Since IQ (ability) and education are positively correlated, the bias in beta_7 (educ) is positive.")
} else {
print("Since IQ (ability) and education are negatively correlated, the bias in beta_7 (educ) is negative.")
}
library(tidyverse)
data <- read.csv("newburn.csv")
# Step 1: Check correlation between ability (IQ) and education
cor(data$iq, data$educ, use = "complete.obs")
# Step 2: Estimate the model without IQ (omitting ability)
model_without_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ, data = data)
summary(model_without_ability)
View(data)
View(data)
# Step 4: Compare estimates of beta_7 (educ coefficient) in both models
beta7_comparison <- data.frame(
Model = c("Without Ability", "With Ability"),
Estimate = c(coef(model_without_ability)["educ"], coef(model_with_ability)["educ"]),
Std_Error = c(summary(model_without_ability)$coefficients["educ", "Std. Error"],
summary(model_with_ability)$coefficients["educ", "Std. Error"])
)
print(beta7_comparison)
# Step 3: Estimate the model including IQ as a proxy for ability
model_with_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ + iq, data = data)
summary(model_with_ability)
library(tidyverse)
data <- read.csv("newburn.csv")
# Step 1: Check correlation between ability (IQ) and education
cor(data$iq, data$educ, use = "complete.obs")
# Step 4: Compare estimates of beta_7 (educ coefficient) in both models
beta7_comparison <- data.frame(
Model = c("Without Ability", "With Ability"),
Estimate = c(coef(model_without_ability)["educ"], coef(model_with_ability)["educ"]),
Std_Error = c(summary(model_without_ability)$coefficients["educ", "Std. Error"],
summary(model_with_ability)$coefficients["educ", "Std. Error"])
)
print(beta7_comparison)
# Step 5: Analyze the direction of bias
if (cor(data$iq, data$educ, use = "complete.obs") > 0) {
print("Since IQ (ability) and education are positively correlated, the bias in beta_7 (educ) is positive.")
} else {
print("Since IQ (ability) and education are negatively correlated, the bias in beta_7 (educ) is negative.")
}
summary(model_without_ability)
# Extract parameter estimates and standard errors
estimates <- coef(model_summary)
model_summary <- summary(model_without_ability)
# Extract parameter estimates and standard errors
model_summary <- summary(model_without_ability)
estimates <- coef(model_summary)
parameter_estimates <- data.frame(
Term = rownames(estimates),
Estimate = estimates[, "Estimate"],
Std_Error = estimates[, "Std. Error"]
)
# Extract R-squared
r_squared <- model_summary$r.squared
# Display results
parameter_estimates
print(paste("R-squared:", r_squared))
# Extract parameter estimates and standard errors
model_summary <- summary(model_without_ability)
estimates <- coef(model_summary)
parameter_estimates <- data.frame(
Term = rownames(estimates),
Estimate = estimates[, "Estimate"],
Std_Error = estimates[, "Std. Error"]
)
# Extract R-squared
r_squared <- model_summary$r.squared
# Display results
parameter_estimates
print(paste("R-squared:", r_squared))
r_squared
# Extract parameter estimates and standard errors
model_without_ability_summary <- summary(model_without_ability)
estimates <- coef(model_without_ability_summary)
parameter_estimates <- data.frame(
Term = rownames(estimates),
Estimate = estimates[, "Estimate"],
Std_Error = estimates[, "Std. Error"]
)
# Extract R-squared
r_squared <- model_without_ability_summary$r.squared
# Display results
parameter_estimates
r_squared
View(model_with_ability)
# Extract parameter estimates and standard errors
model_with_ability_summary <- summary(model_with_ability)
estimates <- coef(model_with_ability_summary)
parameter_estimates <- data.frame(
Term = rownames(estimates),
Estimate = estimates[, "Estimate"],
Std_Error = estimates[, "Std. Error"]
)
# Extract R-squared
r_squared <- model_with_ability_summary$r.squared
# Display results
parameter_estimates
# Extract parameter estimates and standard errors
model_without_ability_summary <- summary(model_without_ability)
estimates <- coef(model_without_ability_summary)
parameter_estimates <- data.frame(
Term = rownames(estimates),
Estimate = estimates[, "Estimate"],
Std_Error = estimates[, "Std. Error"]
)
# Display results
parameter_estimates
model_without_ability_summary$r.squared
model_with_ability_summary$r.squared
library(tidyverse)
# Read the Card (1995) dataset
data_card <- read.csv("card.csv")
# Display the first few rows of the dataset to ensure it was loaded correctly
head(data_card)
# Summary statistics for initial inspection
summary(data_card)
# Plot a few key variables to visualize the data
# For example, plotting wage against education and experience
ggplot(data_card, aes(x = educ, y = lwage)) +
geom_point() +
labs(title = "Log(Wage) vs Education",
x = "Education (years)",
y = "Log(Wage)")
ggplot(data_card, aes(x = exper, y = lwage)) +
geom_point() +
labs(title = "Log(Wage) vs Experience",
x = "Experience (years)",
y = "Log(Wage)")
library(tidyverse)
# Read the Card (1995) dataset
data_card <- read.csv("card.csv")
# Summary statistics for initial inspection
summary(data_card)
library(tidyverse)
# Read the Card (1995) dataset
data_card <- read.csv("card.csv")
ggplot(data_card, aes(x = educ, y = lwage)) +
geom_point() +
labs(title = "Log(Wage) vs Education",
x = "Education (years)",
y = "Log(Wage)")
ggplot(data_card, aes(x = exper, y = lwage)) +
geom_point() +
labs(title = "Log(Wage) vs Experience",
x = "Experience (years)",
y = "Log(Wage)")
library(tidyverse)
# Create an experience squared variable for the regression
data_card <- data_card %>%
mutate(exper2 = exper^2)
# Run the OLS regression for log(wage) with the specified predictors
model_log_wage <- lm(lwage ~ educ + exper + exper2 + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 +
reg667 + reg668 + smsa66, data = data_card)
# Display the summary of the regression results
summary(model_log_wage)
# Fit the reduced form regression model for education
# educ is the dependent variable, and we include nearc4 and other explanatory variables
reduced_form_model <- lm(educ ~ exper + exper2 + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 +
reg667 + reg668 + smsa66 + nearc4, data = data_card)
# Display the summary of the reduced form model
summary(reduced_form_model)
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls()) # clear memory
setwd("/Users/chris/Library/Mobile Documents/com~apple~CloudDocs/Berkeley/COMPSS 212 Applied Statistics I/public-repository-1/problem_set_3")
# options(htmltools.dir.version = FALSE)
# p_load(FSM,car,lfe, skedastic, parallel,GGally,broom,kableExtra, estimatr,plm,leaflet, gganimate, ggplot2, ggthemes, viridis, dplyr, magrittr, knitr,pagedown,tibble,latex2exp,MASS,stargazer)
library(tidyverse)
library(broom)
data <- read.csv("newburn.csv")
# Step 1: Check correlation between ability (IQ) and education
cor(data$iq, data$educ, use = "complete.obs")
# Step 2: Estimate the model without IQ (omitting ability)
model_without_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ, data = data)
summary(model_without_ability)
# Step 3: Estimate the model including IQ as a proxy for ability
model_with_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ + iq, data = data)
summary(model_with_ability)
# Step 4: Compare estimates of beta_7 (educ coefficient) in both models
beta7_comparison <- data.frame(
Model = c("Without Ability", "With Ability"),
Estimate = c(coef(model_without_ability)["educ"], coef(model_with_ability)["educ"]),
Std_Error = c(summary(model_without_ability)$coefficients["educ", "Std. Error"],
summary(model_with_ability)$coefficients["educ", "Std. Error"])
)
print(beta7_comparison)
# Extract parameter estimates and standard errors
model_without_ability_summary <- summary(model_without_ability)
estimates <- coef(model_without_ability_summary)
parameter_estimates <- data.frame(
Term = rownames(estimates),
Estimate = estimates[, "Estimate"],
Std_Error = estimates[, "Std. Error"]
)
# Display results
parameter_estimates
model_without_ability_summary$r.squared
# Extract parameter estimates and standard errors
model_with_ability_summary <- summary(model_with_ability)
estimates <- coef(model_with_ability_summary)
parameter_estimates <- data.frame(
Term = rownames(estimates),
Estimate = estimates[, "Estimate"],
Std_Error = estimates[, "Std. Error"]
)
# Display results
parameter_estimates
model_with_ability_summary$r.squared
library(tidyverse)
# Read the Card (1995) dataset
data_card <- read.csv("card.csv")
ggplot(data_card, aes(x = educ, y = lwage)) +
geom_point() +
labs(title = "Log(Wage) vs Education",
x = "Education (years)",
y = "Log(Wage)")
# Read the Card (1995) dataset
data_card <- read.csv("card.csv")
ggplot(data_card, aes(x = educ, y = lwage)) +
geom_point() +
labs(title = "Log(Wage) vs Education",
x = "Education (years)",
y = "Log(Wage)")
ggplot(data_card, aes(x = exper, y = lwage)) +
geom_point() +
labs(title = "Log(Wage) vs Experience",
x = "Experience (years)",
y = "Log(Wage)")
library(tidyverse)
# Create an experience squared variable for the regression
data_card <- data_card %>%
mutate(exper2 = exper^2)
# Run the OLS regression for log(wage) with the specified predictors
model_log_wage <- lm(lwage ~ educ + exper + exper2 + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 +
reg667 + reg668 + smsa66, data = data_card)
# Display the summary of the regression results
summary(model_log_wage)
# Create an experience squared variable for the regression
data_card <- data_card %>%
mutate(exper2 = exper^2)
# Run the OLS regression for log(wage) with the specified predictors
model_log_wage <- lm(lwage ~ educ + exper + exper2 + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 +
reg667 + reg668 + smsa66, data = data_card)
# Display the summary of the regression results
summary(model_log_wage)
# Fit the reduced form regression model for education
# educ is the dependent variable, and we include nearc4 and other explanatory variables
reduced_form_model <- lm(educ ~ exper + exper2 + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 +
reg667 + reg668 + smsa66 + nearc4, data = data_card)
# Display the summary of the reduced form model
summary(reduced_form_model)
# Step 3: Estimate the model including IQ as a proxy for ability
model_with_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ + iq, data = data)
# Step 2: Estimate the model without IQ (omitting ability)
model_without_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ, data = data)
# Step 2: Estimate the model without IQ (omitting ability)
model_without_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ, data = data)
# Step 3: Estimate the model including IQ as a proxy for ability
model_with_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ + iq, data = data)
# Step 2: Estimate the model without IQ (omitting ability)
model_without_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ, data = data)
# Step 3: Estimate the model including IQ as a proxy for ability
model_with_ability <- lm(lwage ~ exper + tenure + married + south + urban + black + educ + iq, data = data)
# Step 4: Compare estimates of beta_7 (educ coefficient) in both models
beta7_comparison <- data.frame(
Model = c("Without Ability", "With Ability"),
Estimate = c(coef(model_without_ability)["educ"], coef(model_with_ability)["educ"]),
Std_Error = c(summary(model_without_ability)$coefficients["educ", "Std. Error"],
summary(model_with_ability)$coefficients["educ", "Std. Error"])
)
print(beta7_comparison)
library(AER)
# Instrumental Variables (IV) estimation for log(wage) with nearc4 as an instrument for educ
iv_model <- ivreg(lwage ~ educ + exper + exper2 + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 +
reg667 + reg668 + smsa66 |
exper + exper2 + black + south + smsa + reg661 + reg662 +
reg663 + reg664 + reg665 + reg666 + reg667 + reg668 +
smsa66 + nearc4, data = data_card)
# Display the summary of the IV regression results
summary(iv_model)
# Extract the 95% confidence interval for the return to education (educ coefficient)
confint(iv_model, level = 0.95)["educ", ]
library(AER)
# Instrumental Variables (IV) estimation for log(wage) with nearc4 as an instrument for educ
iv_model <- ivreg(lwage ~ educ + exper + exper2 + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 +
reg667 + reg668 + smsa66 |
exper + exper2 + black + south + smsa + reg661 + reg662 +
reg663 + reg664 + reg665 + reg666 + reg667 + reg668 +
smsa66 + nearc4, data = data_card)
# Display the summary of the IV regression results
summary(iv_model)
# Extract the 95% confidence interval for the return to education (educ coefficient)
confint(iv_model, level = 0.95)["educ", ]
# Extract the 95% confidence interval for the return to education (educ coefficient)
confint(model_log_wage, level = 0.95)["educ", ]
confint(iv_model, level = 0.95)["educ", ]
# Run the reduced form regression for educ with both nearc2 and nearc4 as instruments
reduced_form_multiple_instruments <- lm(educ ~ exper + exper2 + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 +
reg666 + reg667 + reg668 + smsa66 + nearc2 + nearc4,
data = data_card)
# Display the summary of the reduced form model
summary(reduced_form_multiple_instruments)
# Load the necessary library
library(AER)
# Run the IV regression using both nearc2 and nearc4 as instruments for educ
iv_model_multiple_instruments <- ivreg(lwage ~ educ + exper + exper2 + black + south + smsa +
reg661 + reg662 + reg663 + reg664 + reg665 + reg666 +
reg667 + reg668 + smsa66 |
exper + exper2 + black + south + smsa + reg661 + reg662 +
reg663 + reg664 + reg665 + reg666 + reg667 + reg668 +
smsa66 + nearc2 + nearc4, data = data_card)
# Display the summary of the IV regression results
summary(iv_model_multiple_instruments)
# Load the sandwich package for robust standard errors
library(sandwich)
# Calculate robust (heteroskedasticity-consistent) standard errors
robust_se <- sqrt(diag(vcovHC(iv_model_multiple_instruments, type = "HC1")))
# Display the coefficients along with both regular and robust standard errors
results <- cbind(
Estimate = coef(iv_model_multiple_instruments),
Std_Error = summary(iv_model_multiple_instruments)$coefficients[, "Std. Error"],
Robust_SE = robust_se
)
results
